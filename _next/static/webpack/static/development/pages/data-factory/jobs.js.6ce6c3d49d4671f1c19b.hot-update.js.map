{"version":3,"file":"static/webpack/static\\development\\pages\\data-factory\\jobs.js.6ce6c3d49d4671f1c19b.hot-update.js","sources":["webpack:///./pages/data-factory/jobs.js"],"sourcesContent":["import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Link from '@material-ui/core/Link';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\n// import ReactJson from 'react-json-view';\r\nconst ReactJson = dynamic(import('react-json-view'), { ssr: false });\r\nimport { Chip } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst styles = theme => ({\r\n    paper: {\r\n        padding: theme.spacing(3, 2)\r\n    },\r\n    link: {\r\n        margin: theme.spacing(1),\r\n    },\r\n});\r\n\r\n\r\nfunction Jobs(props) {\r\n    const { classes } = props;\r\n    return(\r\n        <Container maxWidth=\"md\">\r\n            <Paper className={classes.paper}>\r\n                <Typography variant=\"h2\" gutterBottom>Jobs</Typography>\r\n                <Typography paragraph>\r\n                    Product-Live Data Factory allows you to create <b>Jobs</b>. A Job allows you to create imports and exports of data stored in Product-Live or manipulate files and data that are stored outside of Product-Live.\r\n                    <br></br>\r\n                    These Jobs consist of <b>Tasks</b> that are chained together.\r\n                    Tasks are elementary actions, for example: FTP Get (allows to get a file on a sFTP/FTP server), CSV to XML (allows to convert a CSV file to a XML file which is easier to manipulate)...\r\n                    <br></br>\r\n                    The full list of elementary Tasks can be found here: <Link href={'/data-factory/tasks'} target=\"_blank\" rel=\"noopener\">view all Tasks</Link>.\r\n                </Typography>\r\n                <Typography paragraph>\r\n                    Jobs can be executed <u>manually</u> or <u>periodically</u>.\r\n                </Typography>\r\n                <Typography paragraph>\r\n                    An example of creating a Job for daily import data from your ERP to Product-Live would be as follow:\r\n                    <ol>\r\n                        <li><b>FTP Get</b> Get the latest CSV file on a FTP server.</li>\r\n                        <li><b>CSV to XML</b> Transform the CSV to a XML format.</li>\r\n                        <li><b>Transform XLST</b> Transform the XML to the format expected by Product-Live</li>\r\n                        <li><b>Import Items</b> Import products to Product-Live</li>\r\n                    </ol>\r\n                </Typography>\r\n                <Typography paragraph>\r\n                    In this Job there are 4 Tasks chained.\r\n                </Typography>\r\n                <Typography variant=\"h3\" gutterBottom>Pipelines</Typography>\r\n                <Typography paragraph>\r\n                    Jobs are executed in <b>Pipelines</b>. A pipeline is a work stack of Jobs with rule: <u>first in first out</u>.\r\n                    <br></br>\r\n                    By default you have one Pipeline on your account, but you can purchase as many Pipelines as you want. For example you can need multiple Pipelines in these cases:\r\n                    <ul>\r\n                        <li>You want to execute Jobs in parallel.</li>\r\n                        <li>You want that the Jobs of your Sandbox Space can not have slowdown effects on Jobs of your Production Space.</li>\r\n                        <li>You need that a Job must be executed at a precise time.</li>\r\n                    </ul>\r\n                    If you have several Pipelines, then a job can be associated with one or multiple Pipelines. This allow you to reduce the cost of adding Pipelines and find the right number of Pipelines for your needs.\r\n                </Typography>\r\n                <Typography variant=\"h3\" gutterBottom>Create and edit Jobs</Typography>\r\n                <Typography paragraph>\r\n                    To create these Jobs you can choose between creating them with the graphical user interface or with an advanced mode where you describe your Job in a JSON file. First go to:\r\n                    <Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n                        <Typography color=\"primary\">Product-Live Settings</Typography>\r\n                        <Typography color=\"primary\">Data Factory</Typography>\r\n                        <Typography color=\"primary\">Jobs</Typography>\r\n                    </Breadcrumbs>\r\n                </Typography>\r\n\r\n                <Typography variant=\"h4\" gutterBottom>The graphical user interface</Typography>\r\n                <Typography paragraph>\r\n                    The graphical user interface is a good way to start. This is simple, even a non technical user can use this interface.\r\n                </Typography>\r\n                <Typography paragraph>\r\n                    \r\n                </Typography>\r\n\r\n                <Typography variant=\"h4\" gutterBottom>The advanced edition in JSON</Typography>\r\n                <Typography paragraph>\r\n                    The advanced edition is prefered by the advanced users of Product-Live Data Factory. It allows to quickly duplicate or mass edit Jobs definition.\r\n                    <br></br>\r\n                    For this you can download the <Link href={''}>VS Code Extension</Link> that will help you a lot for creating a valid JSON description of your Job.\r\n                </Typography>\r\n\r\n                <Typography variant=\"h5\" gutterBottom>Core structure of a Job</Typography>\r\n                <NoSsr>\r\n                    <ReactJson\r\n                        style={{width: \"100%\", overflowY: \"auto\", fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif;'}}\r\n                        theme=\"railscasts\"\r\n                        name={false}\r\n                        src={\r\n                            {\r\n                                \"key\": \"exportProductsXSLX\",    \r\n                                \"displayName\": {\r\n                                    \"_default\": \"Export products in Excel format\",\r\n                                    \"fra\": \"Exporter les produits au format Excel\"\r\n                                },\r\n                                \"description\": {\r\n                                    \"_default\": \"Export products in Excel format from a selection of products on the grid\",\r\n                                    \"fra\": \"Exporte les produits au format Excel à partir d'une sélection de produits depuis la grille\"\r\n                                },\r\n                                \"status\": \"DRAFT\",\r\n                                \"trigger\": \"MANUAL\",\r\n                                \"periodicity\": [\r\n                                    {\r\n                                        \"type\": \"EVERY_WEEKS\",\r\n                                        \"params\": [\r\n                                            {\r\n                                                \"day\": \"MONDAY\",\r\n                                                \"hour\": \"08:00\",\r\n                                                \"timezone\": \"EUROPE/BERLIN\"\r\n                                            },\r\n                                            {\r\n                                                \"day\": \"TUESDAY\",\r\n                                                \"hour\": \"09:00\",\r\n                                                \"timezone\": \"EUROPE/BERLIN\"\r\n                                            }\r\n                                        ]\r\n                                    }                                    \r\n                                ],\r\n                                \"labels\": [\"exports\",\"web site\"],\r\n                                \"userInputs\": [],\r\n                                \"jobInputs\": [],\r\n                                \"tasks\": [],\r\n                                \"outputParameters\": {},\r\n                                \"userOutputs\": [],\r\n                                \"onError\": \"\"\r\n                            }                            \r\n                        }\r\n                        enableClipboard={false}\r\n                        displayObjectSize={false}\r\n                        displayDataTypes={false}\r\n                        collapsed={1} />\r\n                </NoSsr>\r\n                <Table className={classes.table} size=\"small\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Property</TableCell>\r\n                            <TableCell>Description</TableCell>\r\n                            <TableCell>Status</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            <TableCell>key</TableCell>\r\n                            <TableCell>A unique key per Job. Best practice: use camel case.</TableCell>\r\n                            <TableCell><Chip variant=\"outlined\" size=\"small\" label=\"required, max 75, unique\" color=\"secondary\" /></TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>displayName</TableCell>\r\n                            <TableCell>The name displayed to users. The default value is required</TableCell>\r\n                            <TableCell><Chip variant=\"outlined\" size=\"small\" label=\"_default required, max 75\" color=\"secondary\" /></TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>description</TableCell>\r\n                            <TableCell>The descriptin displayed to users. If a value is set, then the _default lang is required.</TableCell>\r\n                            <TableCell><Chip variant=\"outlined\" size=\"small\" label=\"optional\" /></TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>status</TableCell>\r\n                            <TableCell>Define the status of the Job:<br></br>DRAFT | PRODUCTION | STAGING | ARCHIVED</TableCell>\r\n                            <TableCell><Chip variant=\"outlined\" size=\"small\" label=\"required\" color=\"secondary\" /></TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell>trigger</TableCell>\r\n                            <TableCell>Define how the Job is triggered:<br></br>MANUAL | PERIODIC | MANUAL_OR_PERIODIC</TableCell>\r\n                            <TableCell><Chip variant=\"outlined\" size=\"small\" label=\"required\" color=\"secondary\" /></TableCell>\r\n                        </TableRow>\r\n                    </TableBody>\r\n                </Table>\r\n            </Paper>            \r\n        </Container>\r\n    )\r\n}\r\n\r\nJobs.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Jobs);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAAA;AACA;AASA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AARA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAsCA;AACA;AACA;AACA;AA9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgsourceRoot":""}