{"version":3,"file":"static/webpack/static\\development\\pages\\data-factory\\tasks\\generate-excel.js.0981ef687055748b1dc4.hot-update.js","sources":["webpack:///./pages/data-factory/tasks/generate-excel.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport XMLViewer from 'react-xml-viewer';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst input = '<Generate-Excel><File><File-Name>products.xlsx</File-Name><Sheets><Sheet><Sheet-Name>products</Sheet-Name><Cells><Cell line=\"1\" column=\"1\"><![CDATA[EAN]]></Cell><Cell line=\"1\" column=\"2\"><![CDATA[Image]]></Cell><Cell line=\"1\" column=\"3\"><![CDATA[Link]]></Cell><Cell line=\"2\" column=\"1\"><![CDATA[1234567890123]]></Cell><Cell line=\"2\" column=\"2\" type=\"image\"><![CDATA[https://host.com/28a01a76849106eb.jpg?preset=small]]></Cell><Cell line=\"2\" column=\"3\" url=\"http://product-live.com\" link-type=\"URL\"><![CDATA[Link to product-live website]]></Cell></Cells></Sheet></Sheets></File></Generate-Excel>';\r\nconst ouput = '<Files><File><File-Name>Output.xlsx</File-Name><Url>https://pl.com/output.xlsx</Url></File></Files>';\r\nconst customTheme = {\r\n    \"textColor\": \"#bbbbbb\",\r\n    \"commentColor\": \"#bbbbbb\",\r\n    \"tagColor\": \"#e06c75\",\r\n    \"attributeKeyColor\": \"#d19a66\",\r\n    \"attributeValueColor\": \"#89c36e\",\r\n    \"cdataColor\": \"#d9c07b\",\r\n    \"separatorColor\": \"#abb2b2\"\r\n  }\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(3, 2)\r\n  },\r\n  gridItem: {\r\n    height: '90vh',\r\n    overflowX: 'auto'\r\n  }\r\n}));\r\n\r\n\r\nfunction GenerateExcel() {\r\n    const classes = useStyles();\r\n    return(\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3} >\r\n                <Grid item xs={7} className={classes.gridItem}>\r\n                    <Paper className={classes.paper}>\r\n                        <Typography variant=\"h2\" gutterBottom>Generate Excel</Typography>\r\n                        <Typography variant=\"h4\" gutterBottom>Description</Typography>\r\n                        <Typography paragraph>\r\n                            You need to to generate one or multiple .xlsx file. The .xlsx file can be generated with formatting and images. A template file with the extension .xslx must be created with a software like Microsoft Excel or Google Sheets.\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" gutterBottom>Inputs</Typography>\r\n                        <Table className={classes.table} size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Param</TableCell>\r\n                                    <TableCell>Description</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>Input</TableCell>\r\n                                    <TableCell>You can select between Output or File.Select Output if you want to use the output of another action.Select File if you to use always the same file.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>Template</TableCell>\r\n                                    <TableCell>You must select a .xlsx file.</TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                        <br></br>\r\n                        <br></br>\r\n                        <Typography variant=\"h4\" gutterBottom>Expected input</Typography>\r\n                        <Table className={classes.table} size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>XPath</TableCell>\r\n                                    <TableCell>Description</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>Generate-Excel</TableCell>\r\n                                    <TableCell>Root of the document</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./File</TableCell>\r\n                                    <TableCell>For each files you want to generate.You can generate multiple files.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./File/File-Name</TableCell>\r\n                                    <TableCell>File name</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./Sheets</TableCell>\r\n                                    <TableCell>Sheets block</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./Sheets/Sheet</TableCell>\r\n                                    <TableCell>For each sheet you want to generate</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./Sheets/Sheet/Sheet-Name</TableCell>\r\n                                    <TableCell>Name of the sheet.Either the sheet already exists and it writes in it,or it does not exist and it is created.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./Sheets/Sheet/Cells</TableCell>\r\n                                    <TableCell>Cells block</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./Sheets/Sheet/Cells/Cell</TableCell>\r\n                                    <TableCell>Content of the cell. For IMAGE type cells put the original url. Always put a CDATA.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>../Cell/@line</TableCell>\r\n                                    <TableCell>Coordinate of the line. The index starts at 1.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>../Cell/@column</TableCell>\r\n                                    <TableCell>Coordinate of the column. The index starts at 1.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>../Cell/@type</TableCell>\r\n                                    <TableCell>Set type=\"IMAGE\" if you want to output an image in the cell. The image will be automtically resized to fit the cell.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>../Cell/@url</TableCell>\r\n                                    <TableCell>Only when you write a link. A valid url</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>../Cell/@link-type</TableCell>\r\n                                    <TableCell>\r\n                                        URL | FILE | EMAIL | DOCUMENT<br></br>\r\n                                        URL : open a valid url on your default web browser<br></br>\r\n                                        FILE: open a file on your local system , the url attribute must be a valid path<br></br>\r\n                                        EMAIL: open your default email program, the url attribute must be a valid email<br></br>\r\n                                        DOCUMENT: reference another cell in the document, the url attribute must be like : 'Sheet1'!A1\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs className={classes.gridItem} >\r\n                    <Typography variant=\"h4\" gutterBottom>Expected input - Example</Typography>\r\n                    <div style={{padding: 10, backgroundColor: \"#282c34\", width: \"100%\", overflowY: \"auto\"}}>\r\n                        <XMLViewer xml={input} theme={customTheme} indentSize={5} />\r\n                    </div>\r\n                    <br></br>\r\n                    <Typography variant=\"h4\" gutterBottom>Ouput - Example</Typography>\r\n                    <div style={{padding: 10, backgroundColor: \"#282c34\", width: \"100%\", overflowY: \"auto\"}}>\r\n                        <XMLViewer xml={ouput} theme={customTheme} indentSize={5} />\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles()(GenerateExcel);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAPA;AAAA;AACA;AAasourceRoot":""}