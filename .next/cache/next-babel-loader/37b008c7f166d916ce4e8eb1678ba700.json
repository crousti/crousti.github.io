{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bertr\\\\Dev\\\\DocumentationV3\\\\pages\\\\data-factory\\\\tasks.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\nimport Link from 'next/link';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  card: {\n    maxWidth: 300\n  },\n  media: {\n    height: 140\n  }\n});\n\nconst tasks = [{\n  \"displayName\": \"FTP\",\n  \"tasks\": [{\n    \"key\": \"ftp-list\",\n    \"displayName\": \"FTP List\",\n    \"description\": \"List all files on a sFTP/FTP server.\",\n    \"image\": \"/data-factory/tasks/spreadsheet.png\",\n    \"link\": \"/data-factory/tasks/ftp-list\"\n  }, {\n    \"key\": \"ftp-get\",\n    \"displayName\": \"FTP Get\",\n    \"description\": \"Get one file on a sFTP/FTP server.\",\n    \"image\": \"/data-factory/tasks/spreadsheet.png\",\n    \"link\": \"/data-factory/tasks/ftp-get\"\n  }, {\n    \"key\": \"ftp-post\",\n    \"displayName\": \"FTP Post\",\n    \"description\": \"Post files on a sFTP/FTP server.\",\n    \"image\": \"/data-factory/tasks/spreadsheet.png\",\n    \"link\": \"/data-factory/tasks/ftp-post\"\n  }]\n}, {\n  \"displayName\": \"Generate files\",\n  \"tasks\": [{\n    \"key\": \"generate-excel\",\n    \"displayName\": \"Generate Excel\",\n    \"description\": \"Generate one or many Excel files.\",\n    \"image\": \"/data-factory/tasks/spreadsheet.png\",\n    \"link\": \"/data-factory/tasks/generate-excel\"\n  }, {\n    \"key\": \"generate-pdf\",\n    \"displayName\": \"Generate PDF\",\n    \"description\": \"Get one or many PDF files\",\n    \"image\": \"/data-factory/tasks/pdf.png\",\n    \"link\": \"/data-factory/tasks/generate-pdf\"\n  }, {\n    \"key\": \"generate-csv\",\n    \"displayName\": \"Generate CSV\",\n    \"description\": \"Generate a CSV file.\",\n    \"image\": \"/data-factory/tasks/spreadsheet.png\",\n    \"link\": \"/data-factory/tasks/generate-csv\"\n  }]\n}];\n\nfunction Tasks(props) {\n  const {\n    classes\n  } = props;\n  return __jsx(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, __jsx(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, __jsx(Container, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, tasks.map((groupTask, index) => __jsx(\"div\", {\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, groupTask.displayName), __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, groupTask.tasks.map((task, idx) => __jsx(Grid, {\n    item: true,\n    xs: 4,\n    key: task.key,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(Link, {\n    href: task.link,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, __jsx(Card, {\n    className: classes.card,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(CardActionArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(CardMedia, {\n    className: classes.media,\n    image: task.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, __jsx(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, task.displayName), __jsx(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    component: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, task.description))), __jsx(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, __jsx(Button, {\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Learn More muc\"))))))), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }))))));\n}\n\nTasks.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Tasks);","map":{"version":3,"sources":["C:/Users/bertr/Dev/DocumentationV3/pages/data-factory/tasks.js"],"names":["React","withStyles","PropTypes","CssBaseline","Container","Grid","Card","CardActionArea","CardActions","CardContent","CardMedia","Button","Typography","CloudDownloadIcon","Link","styles","theme","root","flexGrow","card","maxWidth","media","height","tasks","Tasks","props","classes","map","groupTask","index","displayName","task","idx","key","link","image","description","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport Link from 'next/link';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    card: {\r\n        maxWidth: 300,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\n\r\nconst tasks = [\r\n    {\r\n        \"displayName\": \"FTP\",\r\n        \"tasks\": [\r\n            {\r\n                \"key\": \"ftp-list\",\r\n                \"displayName\": \"FTP List\",\r\n                \"description\": \"List all files on a sFTP/FTP server.\",\r\n                \"image\": \"/data-factory/tasks/spreadsheet.png\",\r\n                \"link\": \"/data-factory/tasks/ftp-list\"\r\n            },\r\n            {\r\n                \"key\": \"ftp-get\",\r\n                \"displayName\": \"FTP Get\",\r\n                \"description\": \"Get one file on a sFTP/FTP server.\",\r\n                \"image\": \"/data-factory/tasks/spreadsheet.png\",\r\n                \"link\": \"/data-factory/tasks/ftp-get\"\r\n            },\r\n            {\r\n                \"key\": \"ftp-post\",\r\n                \"displayName\": \"FTP Post\",\r\n                \"description\": \"Post files on a sFTP/FTP server.\",\r\n                \"image\": \"/data-factory/tasks/spreadsheet.png\",\r\n                \"link\": \"/data-factory/tasks/ftp-post\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"displayName\": \"Generate files\",\r\n        \"tasks\": [\r\n            {\r\n                \"key\": \"generate-excel\",\r\n                \"displayName\": \"Generate Excel\",\r\n                \"description\": \"Generate one or many Excel files.\",\r\n                \"image\": \"/data-factory/tasks/spreadsheet.png\",\r\n                \"link\": \"/data-factory/tasks/generate-excel\"\r\n            },\r\n            {\r\n                \"key\": \"generate-pdf\",\r\n                \"displayName\": \"Generate PDF\",\r\n                \"description\": \"Get one or many PDF files\",\r\n                \"image\": \"/data-factory/tasks/pdf.png\",\r\n                \"link\": \"/data-factory/tasks/generate-pdf\"\r\n            },\r\n            {\r\n                \"key\": \"generate-csv\",\r\n                \"displayName\": \"Generate CSV\",\r\n                \"description\": \"Generate a CSV file.\",\r\n                \"image\": \"/data-factory/tasks/spreadsheet.png\",\r\n                \"link\": \"/data-factory/tasks/generate-csv\"\r\n            }\r\n        ]\r\n    }\r\n    \r\n];\r\n\r\n\r\nfunction Tasks(props) {\r\n    const { classes } = props;\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <div className={classes.root}>\r\n                <Container maxWidth=\"md\">\r\n                    {tasks.map((groupTask, index) => (\r\n                        <div key={index}>\r\n                            <h3>{groupTask.displayName}</h3>\r\n                            <Grid container spacing={3}>\r\n                                {groupTask.tasks.map((task, idx) => (\r\n                                    <Grid item xs={4} key={task.key}>\r\n                                        <Link href={task.link}>\r\n                                            <Card className={classes.card}>\r\n                                                <CardActionArea>\r\n                                                    <CardMedia\r\n                                                        className={classes.media}\r\n                                                        image={task.image}\r\n                                                    />\r\n                                                    <CardContent>\r\n                                                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                                            {task.displayName}\r\n                                                        </Typography>\r\n                                                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                                            {task.description}\r\n                                                        </Typography>\r\n                                                    </CardContent>\r\n                                                </CardActionArea>\r\n                                                <CardActions>\r\n                                                    <Button size=\"small\" color=\"primary\">\r\n                                                        Learn More muc\r\n                                                    </Button>\r\n                                                </CardActions>\r\n                                            </Card>\r\n                                        </Link>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n                            <br></br>\r\n                            <br></br>\r\n                        </div>\r\n                    ))}                    \r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nTasks.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Tasks);"]},"metadata":{},"sourceType":"module"}