{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/styles';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport XMLViewer from 'react-xml-viewer';\nimport Typography from '@material-ui/core/Typography';\nvar input = '<Generate-Excel><File><File-Name>products.xlsx</File-Name><Sheets><Sheet><Sheet-Name>products</Sheet-Name><Cells><Cell line=\"1\" column=\"1\"><![CDATA[EAN]]></Cell><Cell line=\"1\" column=\"2\"><![CDATA[Image]]></Cell><Cell line=\"1\" column=\"3\"><![CDATA[Link]]></Cell><Cell line=\"2\" column=\"1\"><![CDATA[1234567890123]]></Cell><Cell line=\"2\" column=\"2\" type=\"image\"><![CDATA[https://host.com/28a01a76849106eb.jpg?preset=small]]></Cell><Cell line=\"2\" column=\"3\" url=\"http://product-live.com\" link-type=\"URL\"><![CDATA[Link to product-live website]]></Cell></Cells></Sheet></Sheets></File></Generate-Excel>';\nvar ouput = '<Files><File><File-Name>Output.xlsx</File-Name><Url>https://pl.com/output.xlsx</Url></File></Files>';\nvar customTheme = {\n  \"textColor\": \"#bbbbbb\",\n  \"commentColor\": \"#bbbbbb\",\n  \"tagColor\": \"#e06c75\",\n  \"attributeKeyColor\": \"#d19a66\",\n  \"attributeValueColor\": \"#89c36e\",\n  \"cdataColor\": \"#d9c07b\",\n  \"separatorColor\": \"#abb2b2\"\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    paper: {\n      padding: theme.spacing(3, 2)\n    },\n    gridItem: {\n      height: '90vh',\n      overflowX: 'auto'\n    }\n  };\n});\n\nfunction GenerateExcel() {\n  var classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3\n  }, __jsx(Grid, {\n    item: true,\n    xs: 7,\n    className: classes.gridItem\n  }, __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(Typography, {\n    variant: \"h2\",\n    gutterBottom: true\n  }, \"Generate Excel\"), __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true\n  }, \"Description\"), __jsx(Typography, {\n    paragraph: true\n  }, \"You need to to generate one or multiple .xlsx file. The .xlsx file can be generated with formatting and images. A template file with the extension .xslx must be created with a software like Microsoft Excel or Google Sheets.\"), __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true\n  }, \"Inputs\"), __jsx(Table, {\n    className: classes.table,\n    size: \"small\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Param\"), __jsx(TableCell, null, \"Description\"))), __jsx(TableBody, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Input\"), __jsx(TableCell, null, \"You can select between Output or File.Select Output if you want to use the output of another action.Select File if you to use always the same file.\")), __jsx(TableRow, null, __jsx(TableCell, null, \"Template\"), __jsx(TableCell, null, \"You must select a .xlsx file.\")))), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true\n  }, \"Expected input\"), __jsx(Table, {\n    className: classes.table,\n    size: \"small\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"XPath\"), __jsx(TableCell, null, \"Description\"))), __jsx(TableBody, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Generate-Excel\"), __jsx(TableCell, null, \"Root of the document\")), __jsx(TableRow, null, __jsx(TableCell, null, \"./File\"), __jsx(TableCell, null, \"For each files you want to generate.You can generate multiple files.\")), __jsx(TableRow, null, __jsx(TableCell, null, \"./File/File-Name\"), __jsx(TableCell, null, \"File name\")), __jsx(TableRow, null, __jsx(TableCell, null, \"./Sheets\"), __jsx(TableCell, null, \"Sheets block\")), __jsx(TableRow, null, __jsx(TableCell, null, \"./Sheets/Sheet\"), __jsx(TableCell, null, \"For each sheet you want to generate\")), __jsx(TableRow, null, __jsx(TableCell, null, \"./Sheets/Sheet/Sheet-Name\"), __jsx(TableCell, null, \"Name of the sheet.Either the sheet already exists and it writes in it,or it does not exist and it is created.\")), __jsx(TableRow, null, __jsx(TableCell, null, \"./Sheets/Sheet/Cells\"), __jsx(TableCell, null, \"Cells block\")), __jsx(TableRow, null, __jsx(TableCell, null, \"./Sheets/Sheet/Cells/Cell\"), __jsx(TableCell, null, \"Content of the cell. For IMAGE type cells put the original url. Always put a CDATA.\")), __jsx(TableRow, null, __jsx(TableCell, null, \"../Cell/@line\"), __jsx(TableCell, null, \"Coordinate of the line. The index starts at 1.\")), __jsx(TableRow, null, __jsx(TableCell, null, \"../Cell/@column\"), __jsx(TableCell, null, \"Coordinate of the column. The index starts at 1.\")), __jsx(TableRow, null, __jsx(TableCell, null, \"../Cell/@type\"), __jsx(TableCell, null, \"Set type=\\\"IMAGE\\\" if you want to output an image in the cell. The image will be automtically resized to fit the cell.\")), __jsx(TableRow, null, __jsx(TableCell, null, \"../Cell/@url\"), __jsx(TableCell, null, \"Only when you write a link. A valid url\")), __jsx(TableRow, null, __jsx(TableCell, null, \"../Cell/@link-type\"), __jsx(TableCell, null, \"URL | FILE | EMAIL | DOCUMENT\", __jsx(\"br\", null), \"URL : open a valid url on your default web browser\", __jsx(\"br\", null), \"FILE: open a file on your local system , the url attribute must be a valid path\", __jsx(\"br\", null), \"EMAIL: open your default email program, the url attribute must be a valid email\", __jsx(\"br\", null), \"DOCUMENT: reference another cell in the document, the url attribute must be like : 'Sheet1'!A1\")))))), __jsx(Grid, {\n    item: true,\n    xs: true,\n    className: classes.gridItem\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true\n  }, \"Expected input - Example\"), __jsx(\"div\", {\n    style: {\n      padding: 10,\n      backgroundColor: \"#282c34\",\n      width: \"100%\",\n      overflowY: \"auto\"\n    }\n  }, __jsx(XMLViewer, {\n    xml: input,\n    theme: customTheme,\n    indentSize: 5\n  })), __jsx(\"br\", null), __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true\n  }, \"Ouput - Example\"), __jsx(\"div\", {\n    style: {\n      padding: 10,\n      backgroundColor: \"#282c34\",\n      width: \"100%\",\n      overflowY: \"auto\"\n    }\n  }, __jsx(XMLViewer, {\n    xml: ouput,\n    theme: customTheme,\n    indentSize: 5\n  })))));\n}\n\nexport default withStyles()(GenerateExcel);","map":null,"metadata":{},"sourceType":"module"}