{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bertr\\\\Dev\\\\DocumentationV3\\\\pages\\\\data-factory\\\\tasks\\\\GenerateExcel.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport XMLViewer from 'react-xml-viewer';\nimport Typography from '@material-ui/core/Typography';\nvar input = '<Generate-Excel><File><File-Name>products.xlsx</File-Name><Sheets><Sheet><Sheet-Name>products</Sheet-Name><Cells><Cell line=\"1\" column=\"1\"><![CDATA[EAN]]></Cell><Cell line=\"1\" column=\"2\"><![CDATA[Image]]></Cell><Cell line=\"1\" column=\"3\"><![CDATA[Link]]></Cell><Cell line=\"2\" column=\"1\"><![CDATA[1234567890123]]></Cell><Cell line=\"2\" column=\"2\" type=\"image\"><![CDATA[https://host.com/28a01a76849106eb.jpg?preset=small]]></Cell><Cell line=\"2\" column=\"3\" url=\"http://product-live.com\" link-type=\"URL\"><![CDATA[Link to product-live website]]></Cell></Cells></Sheet></Sheets></File></Generate-Excel>';\nvar ouput = '<Files><File><File-Name>Output.xlsx</File-Name><Url>https://pl.com/output.xlsx</Url></File></Files>';\nvar customTheme = {\n  \"textColor\": \"#bbbbbb\",\n  \"commentColor\": \"#bbbbbb\",\n  \"tagColor\": \"#e06c75\",\n  \"attributeKeyColor\": \"#d19a66\",\n  \"attributeValueColor\": \"#89c36e\",\n  \"cdataColor\": \"#d9c07b\",\n  \"separatorColor\": \"#abb2b2\"\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    paper: {\n      padding: theme.spacing(3, 2)\n    },\n    gridItem: {\n      height: '90vh',\n      overflowX: 'auto'\n    }\n  };\n});\n\nfunction GenerateExcel() {\n  var classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    xs: 7,\n    className: classes.gridItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h2\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Generate Excel\"), __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Description\"), __jsx(Typography, {\n    paragraph: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"You need to generate one or multiple .xlsx file. The .xlsx file can be generated with formatting and images. A template file with the extension .xslx must be created with a software like Microsoft Excel or Google Sheets.\"), __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Inputs\"), __jsx(Table, {\n    className: classes.table,\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Param\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Description\"))), __jsx(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Input\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"You can select between Output or File.Select Output if you want to use the output of another action.Select File if you to use always the same file.\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Template\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"You must select a .xlsx file.\")))), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Expected input\"), __jsx(Table, {\n    className: classes.table,\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"XPath\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Description\"))), __jsx(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Generate-Excel\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Root of the document\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"./File\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"For each files you want to generate.You can generate multiple files.\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"./File/File-Name\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"File name\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"./Sheets\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Sheets block\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"./Sheets/Sheet\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"For each sheet you want to generate\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"./Sheets/Sheet/Sheet-Name\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Name of the sheet.Either the sheet already exists and it writes in it,or it does not exist and it is created.\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"./Sheets/Sheet/Cells\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Cells block\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"./Sheets/Sheet/Cells/Cell\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Content of the cell. For IMAGE type cells put the original url. Always put a CDATA.\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"../Cell/@line\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Coordinate of the line. The index starts at 1.\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"../Cell/@column\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Coordinate of the column. The index starts at 1.\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"../Cell/@type\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Set type=\\\"IMAGE\\\" if you want to output an image in the cell. The image will be automtically resized to fit the cell.\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"../Cell/@url\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Only when you write a link. A valid url\")), __jsx(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"../Cell/@link-type\"), __jsx(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"URL | FILE | EMAIL | DOCUMENT\", __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), \"URL : open a valid url on your default web browser\", __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), \"FILE: open a file on your local system , the url attribute must be a valid path\", __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), \"EMAIL: open your default email program, the url attribute must be a valid email\", __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), \"DOCUMENT: reference another cell in the document, the url attribute must be like : 'Sheet1'!A1\")))))), __jsx(Grid, {\n    item: true,\n    xs: true,\n    className: classes.gridItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Expected input - Example\"), __jsx(\"div\", {\n    style: {\n      padding: 10,\n      backgroundColor: \"#282c34\",\n      width: \"100%\",\n      overflowY: \"auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, __jsx(XMLViewer, {\n    xml: input,\n    theme: customTheme,\n    indentSize: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }), __jsx(Typography, {\n    variant: \"h4\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Ouput - Example\"), __jsx(\"div\", {\n    style: {\n      padding: 10,\n      backgroundColor: \"#282c34\",\n      width: \"100%\",\n      overflowY: \"auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, __jsx(XMLViewer, {\n    xml: ouput,\n    theme: customTheme,\n    indentSize: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })))));\n}\n\nexport default withStyles()(GenerateExcel);","map":{"version":3,"sources":["C:/Users/bertr/Dev/DocumentationV3/pages/data-factory/tasks/GenerateExcel.js"],"names":["React","Component","withStyles","makeStyles","useTheme","Paper","Grid","Table","TableBody","TableCell","TableHead","TableRow","XMLViewer","Typography","input","ouput","customTheme","useStyles","theme","root","flexGrow","paper","padding","spacing","gridItem","height","overflowX","GenerateExcel","classes","table","backgroundColor","width","overflowY"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport XMLViewer from 'react-xml-viewer';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst input = '<Generate-Excel><File><File-Name>products.xlsx</File-Name><Sheets><Sheet><Sheet-Name>products</Sheet-Name><Cells><Cell line=\"1\" column=\"1\"><![CDATA[EAN]]></Cell><Cell line=\"1\" column=\"2\"><![CDATA[Image]]></Cell><Cell line=\"1\" column=\"3\"><![CDATA[Link]]></Cell><Cell line=\"2\" column=\"1\"><![CDATA[1234567890123]]></Cell><Cell line=\"2\" column=\"2\" type=\"image\"><![CDATA[https://host.com/28a01a76849106eb.jpg?preset=small]]></Cell><Cell line=\"2\" column=\"3\" url=\"http://product-live.com\" link-type=\"URL\"><![CDATA[Link to product-live website]]></Cell></Cells></Sheet></Sheets></File></Generate-Excel>';\r\nconst ouput = '<Files><File><File-Name>Output.xlsx</File-Name><Url>https://pl.com/output.xlsx</Url></File></Files>';\r\nconst customTheme = {\r\n    \"textColor\": \"#bbbbbb\",\r\n    \"commentColor\": \"#bbbbbb\",\r\n    \"tagColor\": \"#e06c75\",\r\n    \"attributeKeyColor\": \"#d19a66\",\r\n    \"attributeValueColor\": \"#89c36e\",\r\n    \"cdataColor\": \"#d9c07b\",\r\n    \"separatorColor\": \"#abb2b2\"\r\n  }\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(3, 2)\r\n  },\r\n  gridItem: {\r\n    height: '90vh',\r\n    overflowX: 'auto'\r\n  }\r\n}));\r\n\r\n\r\nfunction GenerateExcel() {\r\n    const classes = useStyles();\r\n    return(\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3} >\r\n                <Grid item xs={7} className={classes.gridItem}>\r\n                    <Paper className={classes.paper}>\r\n                        <Typography variant=\"h2\" gutterBottom>Generate Excel</Typography>\r\n                        <Typography variant=\"h4\" gutterBottom>Description</Typography>\r\n                        <Typography paragraph>\r\n                            You need to generate one or multiple .xlsx file. The .xlsx file can be generated with formatting and images. A template file with the extension .xslx must be created with a software like Microsoft Excel or Google Sheets.\r\n                        </Typography>\r\n                        <Typography variant=\"h4\" gutterBottom>Inputs</Typography>\r\n                        <Table className={classes.table} size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Param</TableCell>\r\n                                    <TableCell>Description</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>Input</TableCell>\r\n                                    <TableCell>You can select between Output or File.Select Output if you want to use the output of another action.Select File if you to use always the same file.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>Template</TableCell>\r\n                                    <TableCell>You must select a .xlsx file.</TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                        <br></br>\r\n                        <br></br>\r\n                        <Typography variant=\"h4\" gutterBottom>Expected input</Typography>\r\n                        <Table className={classes.table} size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>XPath</TableCell>\r\n                                    <TableCell>Description</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>Generate-Excel</TableCell>\r\n                                    <TableCell>Root of the document</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./File</TableCell>\r\n                                    <TableCell>For each files you want to generate.You can generate multiple files.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./File/File-Name</TableCell>\r\n                                    <TableCell>File name</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./Sheets</TableCell>\r\n                                    <TableCell>Sheets block</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./Sheets/Sheet</TableCell>\r\n                                    <TableCell>For each sheet you want to generate</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./Sheets/Sheet/Sheet-Name</TableCell>\r\n                                    <TableCell>Name of the sheet.Either the sheet already exists and it writes in it,or it does not exist and it is created.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./Sheets/Sheet/Cells</TableCell>\r\n                                    <TableCell>Cells block</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>./Sheets/Sheet/Cells/Cell</TableCell>\r\n                                    <TableCell>Content of the cell. For IMAGE type cells put the original url. Always put a CDATA.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>../Cell/@line</TableCell>\r\n                                    <TableCell>Coordinate of the line. The index starts at 1.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>../Cell/@column</TableCell>\r\n                                    <TableCell>Coordinate of the column. The index starts at 1.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>../Cell/@type</TableCell>\r\n                                    <TableCell>Set type=\"IMAGE\" if you want to output an image in the cell. The image will be automtically resized to fit the cell.</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>../Cell/@url</TableCell>\r\n                                    <TableCell>Only when you write a link. A valid url</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>../Cell/@link-type</TableCell>\r\n                                    <TableCell>\r\n                                        URL | FILE | EMAIL | DOCUMENT<br></br>\r\n                                        URL : open a valid url on your default web browser<br></br>\r\n                                        FILE: open a file on your local system , the url attribute must be a valid path<br></br>\r\n                                        EMAIL: open your default email program, the url attribute must be a valid email<br></br>\r\n                                        DOCUMENT: reference another cell in the document, the url attribute must be like : 'Sheet1'!A1\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs className={classes.gridItem} >\r\n                    <Typography variant=\"h4\" gutterBottom>Expected input - Example</Typography>\r\n                    <div style={{padding: 10, backgroundColor: \"#282c34\", width: \"100%\", overflowY: \"auto\"}}>\r\n                        <XMLViewer xml={input} theme={customTheme} indentSize={5} />\r\n                    </div>\r\n                    <br></br>\r\n                    <Typography variant=\"h4\" gutterBottom>Ouput - Example</Typography>\r\n                    <div style={{padding: 10, backgroundColor: \"#282c34\", width: \"100%\", overflowY: \"auto\"}}>\r\n                        <XMLViewer xml={ouput} theme={customTheme} indentSize={5} />\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles()(GenerateExcel);"]},"metadata":{},"sourceType":"module"}